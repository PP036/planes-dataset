#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø–æ–¥–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è Ray
–ü–æ–¥–∞—î ray_job.py —è–∫ –∑–∞–≤–¥–∞–Ω–Ω—è Ray –∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º —Ñ–∞–π–ª—ñ–≤
"""

import os
import tempfile
import ray
import yaml
import logging
from pathlib import Path
from datetime import datetime
import subprocess
import sys

# –ó–º–µ–Ω—à—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ—Å—Ç—å –ª–æ–≥—É–≤–∞–Ω–Ω—è Ray
logging.getLogger("ray").setLevel(logging.WARNING)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env —Ñ–∞–π–ª—É
try:
    from dotenv import load_dotenv

    load_dotenv()
    print("‚úÖ Loaded environment variables from .env")
except ImportError:
    print("‚ö†Ô∏è  python-dotenv not installed. Install with: pip install python-dotenv")
    print("   Or set environment variables manually")
except Exception as e:
    print(f"‚ö†Ô∏è  Could not load .env file: {e}")


def load_config(config_path="config.yaml"):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ YAML —Ñ–∞–π–ª—É"""
    try:
        with open(config_path, 'r') as file:
            config = yaml.safe_load(file)
        return config
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not load config file: {e}")
        return None


def check_required_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —ñ—Å–Ω—É—é—Ç—å –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏"""
    required_files = ["train_yolo.py", "config.yaml", "requirements.txt", "ray_job.py", "../dataset.tar.gz",
                      "data.yaml"]
    missing_files = [f for f in required_files if not Path(f).exists()]

    if missing_files:
        print(f"‚ùå Missing required files: {missing_files}")
        return False

    print("‚úÖ All required files found")
    return True


def prepare_job_files():
    root = Path.cwd()
    files_to_upload = [
        "train_yolo.py",
        "config.yaml",
        "requirements.txt",
        "ray_job.py",
        "data.yaml",
        "../dataset.tar.gz",  # —è–∫—â–æ –∑–∞–ø—É—â–µ–Ω–æ –∑ yolo-cpu, –∞–±–æ –ø—Ä–æ—Å—Ç–æ "dataset" –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –∑ –∫–æ—Ä–µ–Ω—è
    ]
    file_contents = {}

    for entry in files_to_upload:
        p = root / entry
        if not p.exists():
            print(f"‚ùå Missing required file or folder: {entry}")
            return None

        if p.is_dir():
            # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–¥–∞—î–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑ –ø–∞–ø–∫–∏
            for f in p.rglob("*"):
                if f.is_file():
                    # –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –≤—ñ–¥ –∫–æ—Ä–µ–Ω—è –ø—Ä–æ—î–∫—Ç—É, —É POSIX-—Ñ–æ—Ä–º–∞—Ç—ñ
                    rel = f.relative_to(root).as_posix()
                    file_contents[rel] = f.read_bytes()
                    print(f"  ‚úÖ Prepared {rel}")
        else:
            # –æ–¥–∏–Ω–æ—á–Ω–∏–π —Ñ–∞–π–ª (—Å–∫—Ä–∏–ø—Ç –∞–±–æ yaml)
            rel = p.relative_to(root).name
            file_contents[rel] = p.read_bytes()
            print(f"  ‚úÖ Prepared {rel}")

    return file_contents


@ray.remote
def run_ray_job(file_contents):
    # 1. –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É —Ä–æ–±–æ—á—É –ø–∞–ø–∫—É —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ –Ω–µ—ó
    tmp_dir = tempfile.mkdtemp()
    os.chdir(tmp_dir)

    # 2. –†–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ –∫–æ–¥ —ñ –∫–æ–Ω—Ñ—ñ–≥–∏
    for rel_path, content in file_contents.items():
        # –ü—Ä–∏–≤–æ–¥–∏–º–æ —à–ª—è—Ö –¥–æ POSIX-—Ñ–æ—Ä–º–∞—Ç—É —ñ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ "../" —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        clean_rel = Path(rel_path).as_posix().lstrip("../")
        p = Path(clean_rel)
        if p.parent != Path("."):
            p.parent.mkdir(parents=True, exist_ok=True)
        with open(p, "wb") as f:
            f.write(content)

    # 3. –î–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è ‚Äî –≤–∏–≤–æ–¥–∏–º–æ, —â–æ —É –Ω–∞—Å –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ
    print("üìÅ Files before dataset unpack:")
    for p in sorted(Path(".").rglob("*")):
        print(" -", p)

    # 4. *** –†–û–ó–ü–ê–ö–£–í–ê–ù–ù–Ø –î–ê–¢–ê–°–ï–¢–£ –ó –û–î–ù–û–ì–û –ê–†–•–Ü–í–£ ***
    #    –ó–∞–º—ñ—Å—Ç—å —Ç–æ–≥–æ, —â–æ–± —Ç—è–≥–Ω—É—Ç–∏ –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥ dataset –ø–æ —Ñ–∞–π–ª–∏–∫—É,
    #    –º–∏ –≤–∞–Ω—Ç–∞–∂–∏–º–æ —Ç—ñ–ª—å–∫–∏ dataset.tar.gz —ñ —Ä–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ –π–æ–≥–æ.
    print("üîß –†–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ –¥–∞—Ç–∞—Å–µ—Ç –∑ –∞—Ä—Ö—ñ–≤—É dataset.tar.gz ‚Ä¶")
    subprocess.run(["tar", "xzf", "dataset.tar.gz"], check=True)

    # 5. –ó–Ω–æ–≤—É –≤–∏–≤–æ–¥–∏–º–æ –≤–º—ñ—Å—Ç ‚Äî —Ç–µ–ø–µ—Ä –∑ dataset/
    print("üìÅ Files after dataset unpack:")
    for p in sorted(Path(".").rglob("*")):
        print(" -", p)

    # –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ç–µ–ø–µ—Ä –≤—Å—Ç–∞–Ω–æ–≤–ª—é—é—Ç—å—Å—è —á–µ—Ä–µ–∑ runtime_env
    print("‚úÖ Files uploaded and environment configured")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ ray_job.py
    try:
        result = subprocess.run([sys.executable, "ray_job.py"],
                                capture_output=True, text=True, check=True)
        print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå ray_job.py failed: {e}")
        print(f"STDOUT: {e.stdout}")
        print(f"STDERR: {e.stderr}")
        return False


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ Ray Task Submission for YOLO Training")
    print("=" * 40)

    # –ê–¥—Ä–µ—Å–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ Ray
    ray_address = "ray://localhost:10001"  # –ê–¥—Ä–µ—Å–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ Ray

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏
    if not check_required_files():
        return

    # –ó–±–∏—Ä–∞—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ W&B
    wandb_env = {
        'WANDB_API_KEY': os.getenv('WANDB_API_KEY'),
        'WANDB_PROJECT': os.getenv('WANDB_PROJECT'),
        'WANDB_ENTITY': os.getenv('WANDB_ENTITY')
    }

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é W&B (–Ω–µ –ø–æ–∫–∞–∑—É—é—á–∏ –∑–Ω–∞—á–µ–Ω–Ω—è)
    print("üîë W&B Environment Variables:")
    for key, value in wandb_env.items():
        if value:
            print(f"   ‚úÖ {key} is set")
        else:
            print(f"   ‚ö†Ô∏è  {key} not set")

    if not wandb_env['WANDB_API_KEY']:
        print("\n‚ö†Ô∏è  WANDB_API_KEY is required!")
        print("   Set it with: export WANDB_API_KEY=your_key")
        print("   Or get it from: https://wandb.ai/authorize")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Ray
    try:
        if not ray.is_initialized():
            ray.init(address=ray_address)
            print(f"‚úÖ Connected to Ray cluster at {ray_address}")
            print("-" * 40)  # –†–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –ø—ñ—Å–ª—è –ª–æ–≥—ñ–≤ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Ray
            print("Available resources:", ray.available_resources())
    except Exception as e:
        print(f"‚ùå Cannot connect to Ray cluster at {ray_address}: {e}")
        print("   Make sure Ray cluster is running:")
        print("   ray start --head --dashboard-host=0.0.0.0 --dashboard-port=8265")
        return

    try:
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–ª—è—î–º–æ —Ñ–∞–π–ª–∏
        print("üìÅ Preparing files...")
        file_contents = prepare_job_files()
        if not file_contents:
            return

        # –ü–æ–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        print("üöÄ Submitting ray_job.py as Ray task...")

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó –Ω–∞–∑–≤–∏ –∑–∞–ø—É—Å–∫—É
        config = load_config()
        base_run_name = config.get('run_name', 'yolo-ray-training') if config else 'yolo-ray-training'

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω—É –Ω–∞–∑–≤—É –∑–∞–ø—É—Å–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é
        timestamp = datetime.now().strftime('%Y%m%d-%H%M%S')
        run_name = f"{base_run_name}-{timestamp}"

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–ª—è—î–º–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑—ñ –∑–º—ñ–Ω–Ω–∏–º–∏ W&B
        env_vars = {k: v for k, v in wandb_env.items() if v}  # –õ–∏—à–µ –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        env_vars['WANDB_RUN_NAME'] = run_name  # –î–æ–¥–∞—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω—É –Ω–∞–∑–≤—É –∑–∞–ø—É—Å–∫—É

        runtime_env = {
            "env_vars": env_vars
        }

        print(f"üìã Runtime environment: {len(runtime_env['env_vars'])} variables")
        print(f"üèÉ Run name: {run_name}")
        for key in runtime_env['env_vars'].keys():
            if key != 'WANDB_API_KEY':  # –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ API –∫–ª—é—á
                print(f"   - {key}")
            else:
                print(f"   - {key} (hidden)")

        if not runtime_env['env_vars']:
            print("‚ö†Ô∏è  No environment variables to pass!")
            print("   Make sure .env file exists or variables are exported")

        # –ü–æ–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        task = run_ray_job.options(runtime_env=runtime_env).remote(file_contents)

        # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        print("üëÄ Waiting for task completion...")
        success = ray.get(task)

        if success:
            print("üéâ Training completed successfully!")
            print("üåê Check results at:")
            print("   - Ray Dashboard: http://localhost:8265")
            print("   - W&B Dashboard: https://wandb.ai")
        else:
            print("‚ùå Training failed")

    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        ray.shutdown()
        print("üîå Ray connection closed")


if __name__ == "__main__":
    main()
